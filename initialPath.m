function path = initialPath( f0, f1, method, initstructure, options )

% This function creates the initial path from f0 to f1 according to one of
% the three methods:

nt = options.nt;
nx = options.nx;
x = linspace(0,1,nx);

switch method
    case 'linear'
        % initial path via linear interpolation
        path.v = zeros(nt,nx);
        [path.z, path.f] = VtoFZ(path.v ,options);
    case 'landmarks'  
        % Initial path that sends landmarks0 to landmarks1
        landmarks0 = initstructure.landmarks0;
        landmarks1 = initstructure.landmarks1;
        % the transport map generated by matching the landmarks
        tmap = interp1(landmarks0, landmarks1, x,'linear');
        path = PathFromTransport(tmap,f0,f1,options);

     case 'maxmatchKProm'
        % the scheme finds k most prominent local maxima of f0 and of f1 and
        % matches them in order of position. 
        % The PROMINENCE of a local maximum is defined as the least drop 
        % in height necessary in order to get to a point with higher value. 
        % If one of the functions has fewer than k maxima then the scheme
        % uses the largest number of maxima that exist for both functions
        k = initstructure.k;
        [~,locs0,~,p0] = findpeaks(f0);
        [~,locs1,~,p1] = findpeaks(f1);
        A0=[locs0;p0]';
        A1=[locs1;p1]';
        k=min([length(locs0),length(locs1),k]);
        A0=sortrows(A0,2,'descend');
        A1=sortrows(A1,2,'descend');
        A0=sortrows(A0(1:k,:),1);
        A1=sortrows(A1(1:k,:),1);
        % the 1st coordinate is location
        initstructure.landmarks0 = [0, A0(:,1)'/nx,1]; 
        initstructure.landmarks1 = [0, A1(:,1)'/nx,1];
        path = initialPath(f0,f1, 'landmarks',initstructure,options);
     case 'minmatchKProm'
        path = initialPath(-f0,-f1, 'maxmatchKProm',initstructure,options); 
        
end